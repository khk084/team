<<<<<<< HEAD
# Generated by Django 3.1.3 on 2023-06-26 01:10

from django.db import migrations, models
=======
# Generated by Django 4.2.2 on 2023-06-26 03:37

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
>>>>>>> 4055ee879ea2353195aef444b4a281eeff0d5f6c


class Migration(migrations.Migration):

    initial = True

    dependencies = [
<<<<<<< HEAD
=======
        ('auth', '0012_alter_user_first_name_max_length'),
>>>>>>> 4055ee879ea2353195aef444b4a281eeff0d5f6c
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< HEAD
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='유저 아이디')),
                ('password', models.CharField(max_length=128, verbose_name='유저 비밀번호')),
                ('nickname', models.CharField(max_length=16, unique=True, verbose_name='유저 닉네임')),
                ('email', models.EmailField(max_length=128, unique=True, verbose_name='유저 이메일')),
                ('address', models.CharField(max_length=128, verbose_name='유저 주소')),
                ('phone', models.CharField(max_length=128, unique=True, verbose_name='유저 전화번호')),
=======
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=16, unique=True, verbose_name='유저 닉네임')),
                ('address', models.CharField(max_length=128, verbose_name='유저 주소')),
                ('phone', models.CharField(max_length=128, unique=True, verbose_name='유저 전화번호')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '유저',
                'verbose_name_plural': '유저',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
>>>>>>> 4055ee879ea2353195aef444b4a281eeff0d5f6c
            ],
        ),
    ]
